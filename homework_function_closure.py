#-----------------------------------------------------------------------
#1. дан следующий код
#f = func("a", "b", "c")
#print(f("x"))
#Результат должен быть
#["xa", "xb", "xc"]

def func(a,b,c):
    return lambda x: [x+a,x+b,x+c]

f = func("a", "b", "c")
print(f("x"))
print('-' * 50)

#-----------------------------------------------------------------------
#2. дан лист листов
#l = [[1,2,3,4,5,6], [0,0,0,0], ["a", "b", "c"]]

#Необходимо написать код который превратит его в простой лист 
#[1,2,3,4,5,6,0,0,0,0,"a", "b", "c"]
#для решения данной задачи нельзя использовать доп массива

from functools import reduce

l = [[1,2,3,4,5,6], [0,0,0,0], ["a", "b", "c"]]

def func(list):
    return reduce(lambda x,y: x+y, list)

print(func(l))
print('-' * 50)

#-----------------------------------------------------------------------
#3. написать реализацию метода caller
#def a(x,y):
#    print(f"{x} - {y}")
#def caller(func, c, j)
#    pass
#f = caller(a, "100", "200")
#f("h", "z")
#Результат
#"100h - 200z"

def a(x,y):
    print(f"{x} - {y}")

def caller(func, c, j):
    return lambda x,y: func(c+x, j+x)

f = caller(a, "100", "200")
f("h", "z")
print('-' * 50)